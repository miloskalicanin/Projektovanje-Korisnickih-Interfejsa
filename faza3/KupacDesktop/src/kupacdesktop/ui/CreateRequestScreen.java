/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kupacdesktop.ui;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.optionalusertools.DateVetoPolicy;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import kupacdesktop.Navigator;
import kupacdesktop.Strings;
import kupacdesktop.Utils;
import kupacdesktop.network.MockDatabaseService;
import kupacdesktop.network.dto.CreateRequestDTO;
import kupacdesktop.network.dto.UserDTO;

/**
 *
 * @author milos
 */
public class CreateRequestScreen extends javax.swing.JFrame {

    private static final String TAG = CreateRequestScreen.class.getSimpleName();

    private static UserDTO repairman;

    /**
     * Creates new form MainScreen
     */
    public CreateRequestScreen(UserDTO repairman) {
        setTitle(Strings.APP_NAME);
        initComponents();
        setVisible(true);
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setBackground(new java.awt.Color(0xa9a9a9));

        CreateRequestScreen.repairman = repairman;

        initPayment();
        initDatePickers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        inputPayment = new javax.swing.JComboBox<>();
        dateFrom = new javax.swing.JLabel();
        dateFrom1 = new javax.swing.JLabel();
        sendRequest = new javax.swing.JButton();
        inputDateEnd = new com.github.lgooddatepicker.components.DatePicker();
        inputDateBegin = new com.github.lgooddatepicker.components.DatePicker();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mainScreen = new javax.swing.JMenuItem();
        activeRequests = new javax.swing.JMenuItem();
        finishedRequests = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        changeInfo = new javax.swing.JMenuItem();
        changePassword = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo-black-white(1).png"))); // NOI18N

        jLabel3.setText("Nacin placanja:");

        inputPayment.setMaximumRowCount(10);
        inputPayment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dateFrom.setText("Datum pocetka:");

        dateFrom1.setText("Datum kraja:");

        sendRequest.setText("POSALJI ZAHTEV");
        sendRequest.setBackground(new java.awt.Color(0, 0, 0));
        sendRequest.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sendRequest.setForeground(new java.awt.Color(255, 255, 255));
        sendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendRequestActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("Vase licne informacije ce biti poslate majstoru.");

        jMenu1.setText("Navigacija");

        mainScreen.setText("Glavni ekran");
        mainScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainScreenActionPerformed(evt);
            }
        });
        jMenu1.add(mainScreen);

        activeRequests.setText("Aktivni zahtevi");
        activeRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeRequestsActionPerformed(evt);
            }
        });
        jMenu1.add(activeRequests);

        finishedRequests.setText("Zavrseni zahtevi");
        finishedRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRequestsActionPerformed(evt);
            }
        });
        jMenu1.add(finishedRequests);
        jMenu1.add(jSeparator1);

        changeInfo.setText("Izmeni licne podatke");
        changeInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeInfoActionPerformed(evt);
            }
        });
        jMenu1.add(changeInfo);

        changePassword.setText("Promeni lozinku");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });
        jMenu1.add(changePassword);

        logout.setText("Odjavi se");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu1.add(logout);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateFrom1)
                                .addGap(65, 65, 65)
                                .addComponent(inputDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateFrom)
                                    .addComponent(jLabel3))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(inputPayment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputDateBegin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(213, 213, 213))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel11))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(sendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jLabel11)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFrom)
                    .addComponent(inputDateBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFrom1)
                    .addComponent(inputDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(sendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainScreenActionPerformed
        Navigator.openMainScreen(this);
    }//GEN-LAST:event_mainScreenActionPerformed

    private void activeRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeRequestsActionPerformed
        Navigator.openActiveRequestsScreen(this);
    }//GEN-LAST:event_activeRequestsActionPerformed

    private void finishedRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRequestsActionPerformed
        Navigator.openFinishedRequestsScreen(this);
    }//GEN-LAST:event_finishedRequestsActionPerformed

    private void changeInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeInfoActionPerformed
        Navigator.openChangeInfoScreen(this);
    }//GEN-LAST:event_changeInfoActionPerformed

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordActionPerformed
        Navigator.openChangePasswordScreen(this);
    }//GEN-LAST:event_changePasswordActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        if (Utils.displayYesNoScreen(this, "Odjava", "Da li ste sigurni da zelite da se odjavite?")) {
            Navigator.logout(this);
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void sendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendRequestActionPerformed
        String payment = (String) inputPayment.getSelectedItem();
        LocalDate dateBegin = inputDateBegin.getDate();
        LocalDate dateEnd = inputDateEnd.getDate();

        if (dateBegin == null || dateEnd == null || payment == null || payment.isEmpty()) {
            Utils.displayWarningDialog(CreateRequestScreen.this, "Kreiranje zahteva", "Morate da popunite sva polja!");
            return;
        }
        CreateRequestDTO createRequestDTO = new CreateRequestDTO();
        createRequestDTO.setClientUsername(Navigator.getCurrentUser().getUsername());
        createRequestDTO.setRepairmanUsername(repairman.getUsername());
        createRequestDTO.setDateBegin(Date.from(dateBegin.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        createRequestDTO.setDateEnd(Date.from(dateEnd.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        createRequestDTO.setPaymentMethod(payment);

        Utils.logDebugg(TAG, "Create request: " + createRequestDTO);

        new PayTask(createRequestDTO).execute();
    }//GEN-LAST:event_sendRequestActionPerformed

    private void initPayment() {
        List<String> paymentMethods = MockDatabaseService.getInstance().getPaymentMethods();

        String[] paymentMethodsArray = paymentMethods.toArray(new String[paymentMethods.size()]);

        DefaultComboBoxModel model = new DefaultComboBoxModel(paymentMethodsArray);
        inputPayment.setModel(model);
    }

    private void initDatePickers() {
        Locale locale = new Locale("sr", "RS");
        DatePickerSettings dateSettings = new DatePickerSettings();
        dateSettings.setFirstDayOfWeek(DayOfWeek.MONDAY);
        dateSettings.setLocale(locale);
        dateSettings.setFormatForDatesCommonEra("dd.MM.yyyy.");
        dateSettings.setAllowEmptyDates(true);
        inputDateBegin.setSettings(dateSettings);
        //inputDateBegin.setDateToToday();
        //dateSettings.setVetoPolicy(new SampleDateVetoPolicy());

        dateSettings = new DatePickerSettings();
        dateSettings.setFirstDayOfWeek(DayOfWeek.MONDAY);
        dateSettings.setLocale(locale);
        dateSettings.setFormatForDatesCommonEra("dd.MM.yyyy.");
        dateSettings.setAllowEmptyDates(true);
        inputDateEnd.setSettings(dateSettings);
        //inputDateEnd.setDateToToday();
        dateSettings.setVetoPolicy(new SampleDateVetoPolicy());
    }

    private static class SampleDateVetoPolicy implements DateVetoPolicy {

        /**
         * isDateAllowed, Return true if a date should be allowed, or false if a
         * date should be vetoed.
         */
        @Override
        public boolean isDateAllowed(LocalDate date) {
            // Allow only time in future.
            if (date.isBefore(LocalDate.now())) {
                return false;
            }

            // Allow all other days.
            return true;
        }
    }

    private class PayTask extends SwingWorker<Void, String> {

        private CreateRequestDTO createRequestDTO;
        private boolean created = false;

        public PayTask(CreateRequestDTO createRequestDTO) {
            this.createRequestDTO = createRequestDTO;
        }

        @Override
        protected Void doInBackground() {
            MockDatabaseService mds = MockDatabaseService.getInstance();
            try {
                //Thread.sleep(200);
                mds.createRequest(createRequestDTO);
                created = true;
            } catch (Exception e) {
                Utils.logError(TAG, "Create requests error", e);
            }
            return null;
        }

        @Override
        protected void done() {
            super.done();

            if (!created) {
                Utils.displayErrorDialog(CreateRequestScreen.this, "Kreiranje zahteva", "Kreiranje zahteva nije uspesno.");
            } else {
                Utils.displaySuccessDialog(CreateRequestScreen.this, "Kreiranje zahteva", "Kreiranje zahteva je uspesno.");
                CreateRequestScreen.this.dispose();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem activeRequests;
    private javax.swing.JMenuItem changeInfo;
    private javax.swing.JMenuItem changePassword;
    private javax.swing.JLabel dateFrom;
    private javax.swing.JLabel dateFrom1;
    private javax.swing.JMenuItem finishedRequests;
    private com.github.lgooddatepicker.components.DatePicker inputDateBegin;
    private com.github.lgooddatepicker.components.DatePicker inputDateEnd;
    private javax.swing.JComboBox<String> inputPayment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem logout;
    private javax.swing.JMenuItem mainScreen;
    private javax.swing.JButton sendRequest;
    // End of variables declaration//GEN-END:variables
}
